<?php

namespace GovWiki\DbBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use GovWiki\DbBundle\Entity\Issue;
use GovWiki\RequestBundle\Entity\AbstractCreateRequest;

/**
 * IssuesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IssuesRepository extends EntityRepository
{

    /**
     * @param integer $government A government entity id.
     * @param boolean $user       A User entity id or null.
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getListQuery($government, $user = null)
    {
        $expr = $this->_em->getExpressionBuilder();
        $qb = $this->createQueryBuilder('Issue');

        $qb
            ->addSelect('Request, Creator')
            ->leftJoin('Issue.request', 'Request')
            ->leftJoin('Request.creator', 'Creator')
            ->where($expr->eq('Issue.government', ':government'))
            ->orderBy($expr->desc('Issue.date'))
            ->setParameter('government', $government);

        if ($user) {
            $qb
                ->andWhere($expr->orX(
                    $expr->isNull('Issue.request'),
                    $expr->neq('Request.status', ':discard')
                ))
                ->setParameter('discard', AbstractCreateRequest::STATE_DISCARDED);
        } else {
            $qb
                ->andWhere($expr->orX(
                    $expr->isNull('Issue.request'),
                    $expr->eq('Request.status', ':applied')
                ))
                ->setParameter('applied', AbstractCreateRequest::STATE_APPLIED);
        }

        return $qb;
    }

    /**
     * @param integer $government A government entity id.
     * @param integer $year       Issue year.
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getListAllQuery($government, $year = null)
    {
        $expr = $this->_em->getExpressionBuilder();

        $qb = $this->createQueryBuilder('Issue')
            ->where($expr->eq('Issue.government', ':government'))
            ->setParameter('government', $government);

        if ($year) {
             $qb
                 ->andWhere($expr->eq('YEAR(Issue.date)', ':year'))
                 ->setParameter('year', $year);
        }

        return $qb;
    }

    /**
     * @param array $names Array of searched names.
     *
     * @return array
     */
    public function getExistsWithNames(array $names)
    {
        $expr = $this->_em->getExpressionBuilder();

        $data =  $this->createQueryBuilder('Issue')
            ->select('Issue.name')
            ->where($expr->in('Issue.name', ':names'))
            ->setParameter('names', $names)
            ->getQuery()
            ->getArrayResult();

        return array_map(function ($row) {
            return $row['name'];
        }, $data ? $data : []);
    }
}
