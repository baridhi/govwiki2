{"version":3,"sources":["webpack:///./src/GovWiki/FrontendBundle/Resources/public/js/home/index.js"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL,wCAAuC,EAAE,uCAAuC,EAAE,EAAE,EAAE,EAAE,EAAE;AAC1F;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAmC,+BAA+B;;AAElE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,cAAa;AACb;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,iCAAgC,YAAY;AAC5C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;;AAEA;AACA;AACA,oBAAmB,MAAM;AACzB,oBAAmB,OAAO;AAC1B,sBAAqB;AACrB;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B,sBAAqB;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gGAA+F;;AAE/F;;AAEA,yFAAwF;AACxF;AACA,mFAAkF;AAClF;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,gEAA+D;;AAE/D;AACA;AACA;AACA,qEAAoE;AACpE;AACA;AACA;AACA,gFAA+E,qBAAqB;;AAEpG;AACA;AACA,mCAAkC,8CAA8C,sBAAsB,EAAE;;AAExG;AACA,kBAAiB;;AAEjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,gEAA+D;;AAE/D;AACA;AACA;AACA,qEAAoE;AACpE;AACA;AACA;AACA,gFAA+E,qBAAqB;;AAEpG;AACA,mCAAkC,8CAA8C,sBAAsB,EAAE;AACxG;AACA,kBAAiB;;AAEjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D;;AAE3D;AACA;AACA;AACA,iEAAgE;AAChE;AACA;AACA;AACA,4EAA2E,qBAAqB;;AAEhG,+BAA8B,8CAA8C,sBAAsB,EAAE;AACpG;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sCAAqC,uBAAuB,sBAAsB,kBAAkB,iBAAiB,iBAAiB,EAAE;;AAExI;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,cAAa;AACb;AACA,qCAAoC,uBAAuB,sBAAsB,kBAAkB,iBAAiB,iBAAiB,EAAE;AACvI;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAuC,sBAAsB,kBAAkB,iBAAiB,iBAAiB,EAAE;AACnH,sCAAqC,4FAA4F,iBAAiB,iBAAiB,EAAE;;AAErK;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,cAAa;;AAEb;AACA,qCAAoC,4FAA4F,iBAAiB,iBAAiB,EAAE;AACpK;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAoC,MAAM,SAAS,MAAM;AACzD,cAAa;AACb,qCAAoC,MAAM;AAC1C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;;AAGA;AACA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA8B,gBAAgB;AAC9C;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,0CAAyC;AACzC;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,sBAAqB;;AAErB;;AAEA;;AAEA;;AAEA;;AAEA,mDAAkD,cAAc;;AAEhE;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;;AAEjB;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,4HAA2H;AAC3H;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAiB;;AAEjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oDAAmD,yCAAyC;AAC5F,oDAAmD,yCAAyC;;AAE5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kBAAiB;;AAEjB,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA,4BAA2B,aAAa;AACxC,6BAA4B,aAAa;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAK;;AAEL,EAAC,E","file":"map.js","sourcesContent":["/**\n * Extend CartoDB Tooltip\n * Get Layer position\n *\n * @returns {number} Layer Position\n */\ncdb.geo.ui.Tooltip.prototype.getLayerIndex = function () {\n    return this.options.layer._position;\n};\n\n$(function(){\n\n    /**\n     * window.gw.map = {\n     *  centerLatitude: Number\n     *  centerLongitude: Number\n     *  zoom: Number\n     *  username: String\n     * }\n     */\n    window.gw.map = JSON.parse(window.gw.map);\n\n    var color = '';\n\n    // TODO: Hardcoded\n    window.gw.map.county = window.gw.map.colorizedCountyConditions;\n\n    window.gw.map.legend = window.gw.map.legend || [];\n    window.gw.map.legendTypes = window.gw.map.legendTypes || [];\n    var legend = window.gw.map.legend.sort(function (a, b) {\n        return a.order > b.order;\n    });\n    var legendConfig = {\n        fillColor: 'white'\n    };\n\n    //Create the leaflet map\n    var map = L.map('map', {\n        zoomControl: true,\n        center: [window.gw.map.centerLatitude, window.gw.map.centerLongitude],\n        zoom: window.gw.map.zoom\n    });\n\n    var basemap = L.tileLayer('http://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png', {\n        attribution: 'GovWiki'\n    }).addTo(map);\n\n    // Empty layer\n    cartodb.createLayer(map,{\n        user_name: window.gw.map.username,\n        type: 'cartodb',\n        sublayers: []\n    })\n    .addTo(map)\n    .done(function(layer){\n\n        var subLayers = {};\n        // todo remove if it's not need anymore\n        var markerColors = ['#f00', '#800080', '#add8e6'];\n\n        /**\n         * Available layers\n         */\n        var countySubLayer;\n        var tooltips = {};\n\n        /**\n         * Create new SQL request\n         */\n        var sql = new cartodb.SQL({ user: window.gw.map.username });\n\n        /**\n         * SubLayers & tooltips initialization\n         * Get unique altTypes and render new subLayers by them\n         */\n        sql.execute(\"SELECT GeometryType(the_geom), alt_type_slug FROM \" + window.gw.environment + \" WHERE the_geom IS NOT NULL GROUP BY GeometryType(the_geom), alt_type_slug ORDER BY alt_type_slug\")\n            .done(function(data) {\n\n                var altTypes = data.rows.filter(function (alt) {\n                    return !!alt.alt_type_slug\n                });\n\n                initSubLayers(altTypes);\n\n                var isAltTypeLegendUsed = false;\n                if (findLegendType('altTypes')) {\n                    initLegend(altTypes);\n                    isAltTypeLegendUsed = true\n                }\n\n                if (findLegendType('range')) {\n                    initRangeLegend(! isAltTypeLegendUsed);\n                }\n\n                initTooltips();\n\n                initSublayerHandlers();\n\n                fixCartodbConstrain();\n\n                loadFinished();\n\n            })\n            .error(function(errors) {\n                return cartodbError(errors);\n            });\n\n        function cartodbError(errors)\n        {\n            $('.loader').hide();\n            var $mapProcessing = $('.mapOnProcessing');\n            $mapProcessing.find('h5').eq(0).text('Something went wrong, please contact with us (contact@californiapolicycenter.org) ');\n            $mapProcessing.css({\"opacity\":1});\n            $mapProcessing.show();\n\n            console.log(errors);\n        }\n\n        /**\n         * Create additional subLayers by altType\n         *\n         * @param altTypes Unique altTypes from MySQL\n         */\n        function initSubLayers(altTypes) {\n\n            var countySubLayers = altTypes.filter(function(altType) {\n                return (altType.geometrytype === \"MULTIPOLYGON\" || altType.geometrytype === \"POLYGON\")\n            });\n\n            var markerSubLayers = altTypes.filter(function(altType) {\n                return (altType.geometrytype !== \"MULTIPOLYGON\" && altType.geometrytype !== \"POLYGON\")\n            });\n\n            countySubLayers.forEach(function(altType) {\n                initCountySubLayer(altType.alt_type_slug);\n            });\n\n            markerSubLayers.forEach(function(altType) {\n                initMarkerSubLayer(altType.alt_type_slug);\n            });\n\n            initSublayerHandlers();\n            loadFinished();\n\n        }\n\n        /**\n         * Get condition filtered by conditionType\n         * @param {Array} conditions\n         * @param {String} conditionType - period, simple, null\n         * @returns {*}\n         */\n        function getConditionsByType(conditions, conditionType) {\n            return conditions.filter(function(condition) {\n                return condition.type === conditionType;\n            });\n        }\n\n        /**\n         * CartoCSS !!!\n         *\n         * @param altType\n         * @param {boolean?} useFill\n         * @returns {*}\n         */\n        function getLegendItemAsCss (altType, useFill) {\n\n            useFill = useFill || false;\n\n            // Search current altType in legend (window.gw.map.legend = [Object, Object, ...])\n            var foundLegend = legend.filter(function(item){\n                return item.altType == altType\n            })[0];\n\n            if (!foundLegend) {\n                return false;\n            }\n\n            var url = window.location.href.substr(0, window.location.href.length-1);\n\n            // If url to marker exist, create new css rule (path to marker icon)\n            var markerIconUrl = foundLegend ? foundLegend[\"shape\"] : false;\n            var markerFileCss = markerIconUrl ? \"marker-file: url(\" + url + markerIconUrl + \");\" : '';\n\n            var markerStrokeColor = foundLegend ? foundLegend['color'] : false;\n\n            var markerLineColorColorCss = \"marker-line-color: \" + markerStrokeColor + \"; \";\n            if (useFill) {\n                markerLineColorColorCss = \"marker-fill: \" + markerStrokeColor + \"; \";\n            }\n\n            return {\n                markerFileCss: markerFileCss,\n                markerLineColorColorCss: markerLineColorColorCss\n            };\n\n        }\n\n        function findLegendType (legendType) {\n            return window.gw.map.legendTypes.filter(function(legend) {\n                return legend === legendType;\n            })[0];\n        }\n\n        /**\n         * Get period conditions as css string\n         *\n         * @param conditions - window.gw.map.county.conditions\n         * @param color\n         * @param options\n         * @returns {string} CSS String || ''\n         */\n        function getPeriodConditionsAsCss(conditions, color, options) {\n\n            if (!conditions) {\n                console.warn('You don\\'t pass condition array into getPeriodConditionsAsCss() function');\n                return '';\n            }\n\n            options = options || {};\n\n            var cssConditions = '';\n\n            var periodConditions = getConditionsByType(conditions, 'period');\n\n            // If simple conditions found\n            if (periodConditions.length !== 0) {\n\n                periodConditions.forEach(function (condition) {\n\n                    // Fill polygon or marker\n                    var fillRule = options.isMarkerLayer ? 'marker-fill' : 'polygon-fill';\n                    var fillColor = options.isMarkerLayer ? condition.color : condition.color;\n                    var markerTypeCss = options.markerFileCss ? options.markerFileCss : '';\n                    var fill = fillRule + ': ' + fillColor + ';' + markerTypeCss;\n\n                    // Stroke polygon or marker\n                    var lineColorRule = options.isMarkerLayer ? 'marker-line-color' : 'line-color';\n                    var lineColor = options.isMarkerLayer ? color : '#FFFFFF';\n                    var line = lineColorRule + ': ' + lineColor + ';';\n                    if (options.markerLineColorColorCss) {\n                        line = options.markerLineColorColorCss;\n                    }\n                    var stroke = options.isMarkerLayer ? 'marker-line-width: 1;' : 'line-width: 0.5;';\n\n                    var min = '[data >= ' + condition.min + ']';\n                    var max = '[data <= ' + condition.max + ']';\n                    var style = '{ ' + fill + line + stroke + ' line-opacity: 1; polygon-opacity: 0.3; } ';\n\n                    cssConditions += '#layer' + min + max + style;\n                });\n\n            }\n\n            return cssConditions ? cssConditions : '';\n        }\n\n        /**\n         * Get simple conditions as css string\n         *\n         * @param conditions - window.gw.map.county.conditions\n         * @param color\n         * @param options\n         * @returns {string} CSS String || ''\n         */\n        function getSimpleConditionsAsCss(conditions, color, options) {\n\n            if (!conditions) {\n                console.warn('You don\\'t pass condition array into getSimpleConditionsAssCss() function');\n                return '';\n            }\n\n            options = options || {};\n\n            var cssConditions = '';\n\n            var simpleConditions = getConditionsByType(conditions, 'simple');\n\n            // If simple conditions found\n            if (simpleConditions.length !== 0) {\n\n                // Sort by desc, because cartodb specifically processes css rules\n                simpleConditions.sort(function(cur, next){\n                    return cur.value < next.value;\n                });\n\n                simpleConditions.forEach(function(condition) {\n                    // Fill polygon or marker\n                    var fillRule = options.isMarkerLayer ? 'marker-fill' : 'polygon-fill';\n                    var fillColor = options.isMarkerLayer ? condition.color : condition.color;\n                    var markerTypeCss = options.markerFileCss ? options.markerFileCss : '';\n                    var fill = fillRule + ': ' + fillColor + '; ' + markerTypeCss;\n\n                    // Stroke polygon or marker\n                    var lineColorRule = options.isMarkerLayer ? 'marker-line-color' : 'line-color';\n                    var lineColor = options.isMarkerLayer ? color : '#FFFFFF';\n                    var line = lineColorRule + ': ' + lineColor + ';';\n                    if (options.markerLineColorColorCss) {\n                        line = options.markerLineColorColorCss;\n                    }\n                    var stroke = options.isMarkerLayer ? 'marker-line-width: 1;' : 'line-width: 0.5;';\n\n                    var value = '[data ' + condition.operation + ' ' + condition.value + ']';\n                    var style = '{ ' + fill + line + stroke + ' line-opacity: 1; polygon-opacity: 0.3; } ';\n                    cssConditions += '#layer' + value + style;\n                });\n\n            }\n\n            return cssConditions ? cssConditions : '';\n        }\n\n        /**\n         * Get Null condition as css string\n         *\n         * @param conditions - window.gw.map.county.conditions\n         * @param color\n         * @param options\n         * @returns {string} CSS String || ''\n         */\n        function getNullConditionAsCss(conditions, color, options) {\n\n            if (!conditions) {\n                console.warn('You don\\'t pass condition array into getNullConditionAsCss() function');\n                return '';\n            }\n\n            options = options || {};\n\n            var cssConditions = '';\n\n            var nullCondition = getConditionsByType(conditions, 'null');\n\n            // If null condition found\n            if (nullCondition.length !== 0) {\n                // Fill polygon or marker\n                var fillRule = options.isMarkerLayer ? 'marker-fill' : 'polygon-fill';\n                var fillColor = options.isMarkerLayer ? nullCondition[0].color : nullCondition[0].color;\n                var markerTypeCss = options.markerFileCss ? options.markerFileCss : '';\n                var fill = fillRule + ': ' + fillColor + ';' + markerTypeCss;\n\n                // Stroke polygon or marker\n                var lineColorRule = options.isMarkerLayer ? 'marker-line-color' : 'line-color';\n                var lineColor = options.isMarkerLayer ? color : '#FFFFFF';\n                var line = lineColorRule + ': ' + lineColor + ';';\n                if (options.markerLineColorColorCss) {\n                    line = options.markerLineColorColorCss;\n                }\n                var stroke = options.isMarkerLayer ? 'marker-line-width: 1;' : 'line-width: 0.5;';\n\n                var style = '{ ' + fill + line + stroke + ' line-opacity: 1; polygon-opacity: 0.3; } ';\n                cssConditions += '#layer[data = null]' + style;\n            }\n\n            return cssConditions ? cssConditions : '';\n        }\n\n        /**\n         * Initialization County SubLayer\n         *\n         * Tooltip window\n         * Tooltip work with 3.11-13 version, 3.15 is buggy\n         */\n        function initCountySubLayer(altType) {\n\n            var cartocss = '';\n            var colorized = window.gw.map.county.colorized;\n\n            if (colorized) {\n                var conditions = window.gw.map.county.conditions;\n\n                // Default county color\n                cartocss += '#layer { polygon-fill: #DDDDDD; polygon-opacity: 0.7; line-color: #FFF; line-width: 0.5; line-opacity: 1; } ';\n\n                cartocss += getPeriodConditionsAsCss(conditions);\n\n                cartocss += getSimpleConditionsAsCss(conditions);\n\n                cartocss += getNullConditionAsCss(conditions);\n\n                if (cartocss === '') {\n                    console.warn('Can\\'t find any condition, please verify your window.gw.map.county.conditions data');\n                    console.warn('or check getPeriodConditionsAsCss, getSimpleConditionsAsCss, getNullConditionAsCss functions');\n                }\n\n            } else {\n                // Default county color if colorized disabled (flag in admin panel)\n                cartocss = '#layer { polygon-fill: #DDDDDD; polygon-opacity: 0.7; line-color: #FFF; line-width: 0.5; line-opacity: 1; } ';\n            }\n\n            var cLayer = {\n                'cartocss': cartocss,\n                'sql': 'SELECT *, ST_AsGeoJSON(the_geom) AS geometry FROM ' + window.gw.environment + ' WHERE  alt_type_slug = \\''+ altType +'\\'',\n                'interactivity': ['cartodb_id', 'slug', 'alt_type_slug', 'geometry', 'data', 'name']\n            };\n\n            countySubLayer = layer.createSubLayer(cLayer);\n\n            var _altType = altType.toLowerCase();\n\n            subLayers[_altType] = countySubLayer;\n\n            initTooltip(_altType);\n        }\n\n        /**\n         * Initialization Marker SubLayer\n         *\n         * Tooltip window\n         * Tooltip work with 3.11-13 version, 3.15 is buggy\n         */\n        function initMarkerSubLayer(altType) {\n\n            var _altType = altType.toLowerCase();\n\n            var cartocss = '';\n            var colorized = window.gw.map.county.colorized;\n\n            var color = markerColors.shift();\n            var legendItemCss = {};\n\n            if (colorized) {\n\n                var conditions = window.gw.map.county.conditions,\n                    options = {\n                        isMarkerLayer: true\n                    };\n\n                legendItemCss = getLegendItemAsCss(altType);\n                if (legendItemCss) {\n                    options.markerFileCss = legendItemCss.markerFileCss;\n                    options.markerLineColorColorCss = legendItemCss.markerLineColorColorCss;\n                }\n\n                // Default marker color\n                //cartocss += '#layer { marker-fill: #DDDDDD; line-color: #FFF; line-width: 0.5; line-opacity: 1; } ';\n                cartocss += '#layer { '+ legendItemCss.markerFileCss + legendItemCss.markerLineColorColorCss +' line-color: #FFF; line-width: 0.5; line-opacity: 1; } ';\n\n                cartocss += getPeriodConditionsAsCss(conditions, color, options);\n\n                cartocss += getSimpleConditionsAsCss(conditions, color, options);\n\n                cartocss += getNullConditionAsCss(conditions, color, options);\n\n                if (cartocss === '') {\n                    console.warn('Can\\'t find any condition, please verify your window.gw.map.county.conditions data');\n                    console.warn('or check getPeriodConditionsAsCss, getSimpleConditionsAsCss, getNullConditionAsCss functions');\n                }\n\n            } else {\n\n                legendItemCss = getLegendItemAsCss(altType, true);\n                cartocss = '#layer { '+ legendItemCss.markerFileCss + legendItemCss.markerLineColorColorCss +' line-color: #FFF; line-width: 0.5; line-opacity: 1; } ';\n            }\n\n            subLayers[_altType] = layer.createSubLayer({\n                sql: \"SELECT *, GeometryType(the_geom) AS geometrytype FROM \" + window.gw.environment + \" WHERE alt_type_slug = '\" + altType +\"'\",\n                cartocss: cartocss,\n                interactivity: ['cartodb_id', 'slug', 'alt_type_slug', 'geometrytype', 'name']\n            });\n\n            initTooltip(_altType);\n\n        }\n\n\n            /**\n         * Init tooltip\n         * @param altType\n         */\n        function initTooltip(altType) {\n            var tooltipTpl = '<div class=\"cartodb-tooltip-content-wrapper\"> <div class=\"cartodb-tooltip-content\"></p>';\n\n            if (window.gw.map.debug) {\n                tooltipTpl += '<p>{{data}}</p><p>{{name}}</p>';\n            } else {\n                tooltipTpl += '<p>{{name}}</p>';\n            }\n\n            tooltipTpl += '</div></div>';\n\n            tooltips[altType] = new cdb.geo.ui.Tooltip({\n                layer: subLayers[altType],\n                template: tooltipTpl,\n                width: 200,\n                position: 'bottom|right'\n            });\n        }\n\n\n        /**\n         * Add tooltips on page\n         * @type {*[]}\n         */\n        function initTooltips() {\n\n            for (var key in tooltips){\n                if(tooltips.hasOwnProperty(key)){\n\n                    var tooltip = tooltips[key];\n                    if (tooltip != null){\n                        $('#map_wrap').append(tooltip.render().el);\n                    }\n\n                }\n            }\n\n        }\n\n        /**\n         * Move objectsPane above tilePane\n         * It's necessary, otherwise county hover will not work\n         */\n        function fixCartodbConstrain() {\n\n            var $objectsPane = $('.leaflet-objects-pane');\n            var $tilePane = $('.leaflet-tile-pane');\n\n            $objectsPane.appendTo($tilePane);\n            $objectsPane.css({\"z-index\":\"100\"});\n        }\n\n        /**\n         * Set handlers on SubLayers\n         */\n        function initSublayerHandlers() {\n\n            var hovers = [];\n\n            for (var key in subLayers) {\n\n                if (subLayers.hasOwnProperty(key)) {\n\n                    var layer = subLayers[key];\n\n                    // Allow events on layer\n                    layer.setInteraction(true);\n\n                    /**\n                     * Show tooltip on hover\n                     * Or highlight current county\n                     * It depends on the current Layer position\n                     */\n                    layer.bind('mouseover', function (e, latlon, pxPos, data, layerIndex) {\n\n                        // TODO: Must be deleted, when data will be replaced, now it's hardcoded\n                        data.slug = data.slug.replace(/_/g, ' ');\n\n                        hovers[layerIndex] = 1;\n\n                        /**\n                         * If hover active\n                         */\n                        if (_.some(hovers)) {\n\n                            $('#map').css('cursor', 'pointer');\n\n                            /**\n                             * If hover on county layer\n                             */\n                            if (layerIndex == countySubLayer._position) {\n                                drawAppropriatePolygon(data);\n                            } else {\n                                removeAllHoverShapes();\n                            }\n\n                            /**\n                             * Open current tooltip, close another\n                             */\n                            for (var key in tooltips){\n                                if (tooltips.hasOwnProperty(key)) {\n\n                                    var tooltip = tooltips[key];\n\n                                    if (tooltip != null) {\n\n                                        if (tooltip.getLayerIndex() == layerIndex) {\n                                            tooltip.enable();\n                                        } else {\n                                            tooltip.disable();\n                                        }\n\n                                    }\n\n                                }\n                            }\n\n                        }\n\n                    });\n\n                    /**\n                     * Hide tooltip on hover\n                     * Or remove highlight on current county\n                     * It depends on the current Layer position\n                     */\n                    layer.bind('mouseout', function (layerIndex) {\n\n                        hovers[layerIndex] = 0;\n\n                        /**\n                         * If hover not active\n                         */\n                        if (!_.some(hovers)) {\n                            $('#map').css('cursor', 'auto');\n\n                            removeAllHoverShapes();\n\n                            /**\n                             *  Close all tooltips, if cursor outside of layers\n                             */\n                            for (var key in tooltips){\n                                if (tooltips.hasOwnProperty(key)) {\n\n                                    var tooltip = tooltips[key];\n\n                                    if (tooltip != null) {\n\n                                        if (tooltip.getLayerIndex() == layerIndex) {\n                                            tooltip.disable();\n                                        }\n\n                                    }\n\n                                }\n                            }\n\n                        }\n                    });\n\n                    /**\n                     * Change window location after click on marker or county\n                     */\n                    layer.on('featureClick', function (event, latlng, pos, data, layerIndex) {\n\n                        if (!data.alt_type_slug || !data.slug) {\n                            alert('Please verify your data, altTypeSlug or governmentSlug may can not defined, more info in console.log');\n                            console.log(data);\n                            return false;\n                        }\n\n                        /**\n                         * TODO: Hardcoded, data must be in underscore style\n                         */\n                        data.slug = data.slug.replace(/ /g, '_');\n\n                        var pathname = window.location.pathname;\n\n                        if (pathname[pathname.length - 1] !== '/') {\n                            pathname += '/';\n                        }\n\n                        window.location.pathname = pathname + data.alt_type_slug + '/' + data.slug;\n                    });\n\n                }\n\n            }\n\n        }\n\n        function initRangeLegend(showOnTop) {\n\n            if (!window.gw.map.county.colorized) { return false; }\n\n            var legendItems = '';\n            var fieldName = window.gw.map.county.fieldName.replace(/_/g, ' ');\n            var conditions = window.gw.map.county.conditions;\n\n            var periodConditions = getConditionsByType(conditions, 'period');\n\n            var simpleConditions = getConditionsByType(conditions, 'simple');\n\n            var nullCondition = getConditionsByType(conditions, 'null');\n\n            // Build legend items for period conditions\n            if (periodConditions.length !== 0) {\n\n                periodConditions.forEach(function(condition) {\n                    var conditionColor = 'background: ' + condition.color;\n                    var conditionText = condition.min + ' - ' + condition.max;\n\n                    legendItems += '<li><div class=\"bullet\" style=\"' + conditionColor + '\"></div>' +\n                                        conditionText +\n                                   '</li>';\n                });\n\n            }\n\n            // Build legend items for simple conditions\n            if (simpleConditions.length !== 0) {\n\n                simpleConditions.forEach(function(condition) {\n                    var conditionColor = 'background: ' + condition.color;\n                    var conditionText = condition.operation + ' ' + condition.value;\n\n                    legendItems += '<li><div class=\"bullet\" style=\"' + conditionColor + '\"></div>' +\n                                        conditionText +\n                                    '</li>';\n                });\n\n            }\n\n\n            // Build legend items for null conditions\n            if (nullCondition.length !== 0) {\n\n                var conditionColor = 'background: ' + nullCondition[0].color;\n\n                legendItems += '<li><div class=\"bullet\" style=\"' + conditionColor + '\"></div>null</li>';\n\n            }\n\n            var legendClass = 'cartodb-legend-stack';\n            if (showOnTop) {\n                legendClass += ' cartodb-legend-stack__top';\n            }\n\n            var legend = '<div class=\"'+ legendClass +'\" style=\"\"><div class=\"cartodb-legend custom\" style=\"display: block;\"><div class=\"legend-title\">' +\n                            fieldName +\n                         '</div><ul>' +\n                            legendItems +\n                         '</ul></div></div>';\n\n            $('#map').append(legend);\n\n        }\n\n        /**\n         * Init legend\n         */\n        //function initLegend(altTypes) {\n        //    // TODO generate legend on fly from given altTypes\n        //\n        //    var $legendContainer = $('#menu');\n        //\n        //    /*\n        //     Add new elements.\n        //     */\n        //    var compiledLegendItems = '';\n        //\n        //    var markerIcons = {\n        //        \"stroke\": ['red-stroke', 'purple-stroke', 'blue-stroke'],\n        //        \"fill\": ['red-fill', 'purple-fill', 'blue-fill']\n        //    };\n        //\n        //    altTypes.forEach(function(altType) {\n        //\n        //        var altTypeSlug = altType.alt_type_slug.replace(/_/g, ' ');\n        //        var _altTypeSlug = altType.alt_type_slug.toLowerCase();\n        //\n        //        var iconClass = '';\n        //        if (window.gw.map.county.colorized) {\n        //            iconClass = (altType.geometrytype && (altType.geometrytype == \"MULTIPOLYGON\" || altType.geometrytype == \"POLYGON\"))\n        //                ? 'grey-line'\n        //                : 'marker-circle ' + markerIcons['stroke'].shift();\n        //        } else {\n        //            iconClass = (altType.geometrytype && (altType.geometrytype == \"MULTIPOLYGON\" || altType.geometrytype == \"POLYGON\"))\n        //                ? 'grey-line'\n        //                : 'marker-circle ' + markerIcons['fill'].shift();\n        //        }\n        //\n        //        compiledLegendItems += '<li id=' + _altTypeSlug + ' class=\"' + _altTypeSlug + ' legend-item selected\">' +\n        //            '<span class=\"glyphicon glyphicon-ok\"></span>' +\n        //            '<i class=\"' + iconClass + '\"></i>' +\n        //            '<a href=\"javascript:void(0)\">' + altTypeSlug + '</a>' +\n        //            '</li>';\n        //\n        //    });\n        //\n        //    $legendContainer.append(compiledLegendItems);\n        //\n        //    $legendContainer.on('click', '.legend-item', function() {\n        //        $(this).toggleClass('selected');\n        //        var countyName = $(this).attr('id');\n        //        subLayers[countyName].toggle();\n        //    });\n        //\n        //}\n\n        /**\n         * TODO: Replace when legend will be ready\n         * Init legend (NEW)\n         */\n        function initLegend(altTypes) {\n            // TODO generate legend on fly from given altTypes\n\n            //var markerIcons = {\n            //    \"stroke\": ['red-stroke', 'purple-stroke', 'blue-stroke'],\n            //    \"fill\": ['red-fill', 'purple-fill', 'blue-fill']\n            //};\n\n            var $legendContainer = $('#menu');\n\n            /*\n                Add new elements.\n             */\n            var compiledLegendItems = '';\n\n            legend.forEach(function(menu_item) {\n\n                var altType = altTypes.filter(function(altType) {\n                    return (altType.alt_type_slug === menu_item.altType)\n                })[0];\n\n                var altTypeSlug = menu_item.altType.replace(/_/g, ' ');\n                var _altTypeSlug = menu_item.altType.toLowerCase();\n\n                var iconCounty = '',\n                    iconMarker = '';\n\n                var fillColor = '',\n                    strokeColor = '';\n\n                // Colorize markers & counties by range number\n                if (window.gw.map.county.colorized) {\n\n                    // If url to shape exist - show marker\n                    if (menu_item.shape) {\n                        fillColor = 'fillColor=\"' + legendConfig.fillColor + '\" ';\n                        strokeColor = 'strokeColor=\"' + menu_item['color'] + '\" ';\n                        iconMarker = '<img src=\"' + menu_item['shape'] + '\" class=\"svg\" ' + strokeColor + fillColor + '/>';\n\n                    // Else - show county line\n                    } else {\n                        iconCounty = '<i class=\"grey-line\"></i>';\n                    }\n\n                // Use default styles (hardcoded in this file)\n                } else {\n\n                    // If url to shape exist - show marker\n                    if (menu_item.shape) {\n                        fillColor = 'fillColor=\"' + menu_item['color'] + '\" ';\n                        strokeColor = 'strokeColor=\"' + menu_item['color'] + '\" ';\n                        iconMarker = '<img src=\"' + menu_item['shape'] + '\" class=\"svg\" ' + strokeColor + fillColor + '/>';\n\n                        // Else - show county line\n                    } else {\n                        iconCounty = '<i class=\"grey-line\"></i>';\n                    }\n\n                    //iconMarker = (altType.geometrytype && (altType.geometrytype == \"MULTIPOLYGON\" || altType.geometrytype == \"POLYGON\"))\n                    //    ? '<i class=\"grey-line\"></i>'\n                    //    : '<i class=\"marker-circle ' + markerIcons['fill'].shift() + '\"></i>';\n                }\n\n                compiledLegendItems += '<li id=' + _altTypeSlug + ' class=\"' + _altTypeSlug + ' legend-item selected\">' +\n                                         '<span class=\"glyphicon glyphicon-ok\"></span>' +\n                                          iconCounty + iconMarker +\n                                         '<a href=\"javascript:void(0)\">' + menu_item.title + '</a>' +\n                                      '</li>';\n\n            });\n\n            $legendContainer.append(compiledLegendItems);\n\n            /*\n             * Replace all SVG images with inline SVG\n             */\n            jQuery('img.svg').each(function(){\n                var $img = jQuery(this);\n                var imgID = $img.attr('id');\n                var imgClass = $img.attr('class');\n                var imgURL = $img.attr('src');\n\n                var fillColor = $img.attr('fillColor');\n                var strokeColor = $img.attr('strokeColor');\n\n                jQuery.get(imgURL, function(data) {\n                    // Get the SVG tag, ignore the rest\n                    var $svg = jQuery(data).find('svg');\n                    var $rect = $svg.find('rect');\n                    var $path = $svg.find('path');\n\n                    $rect[0] == null || $rect.css({'fill': fillColor, 'stroke': strokeColor});\n                    $path[0] == null || $path.css({'fill': fillColor, 'stroke': strokeColor});\n\n                    // Add replaced image's ID to the new SVG\n                    if(typeof imgID !== 'undefined') {\n                        $svg = $svg.attr('id', imgID);\n                    }\n                    // Add replaced image's classes to the new SVG\n                    if(typeof imgClass !== 'undefined') {\n                        $svg = $svg.attr('class', imgClass+' replaced-svg');\n                    }\n\n                    // Remove any invalid XML tags as per http://validator.w3.org\n                    $svg = $svg.removeAttr('xmlns:a');\n\n                    // Replace image with new SVG\n                    $img.replaceWith($svg);\n\n                }, 'xml');\n\n            });\n\n            $legendContainer.on('click', '.legend-item', function() {\n                $(this).toggleClass('selected');\n                var countyName = $(this).attr('id');\n                subLayers[countyName].toggle();\n            });\n\n        }\n\n        /**\n         * Show map, legend, hide loader\n         */\n        function loadFinished() {\n            $('#map').css({\"opacity\": 1});\n            $('#menu').css({\"opacity\": 1});\n            $('.loader').hide();\n        }\n\n        // Polygon variables and functions\n        var polygon = {};\n        // What should our polygon hover style look like?\n        var polygon_style = {\n            color: \"#808080\",\n            weight: 1,\n            opacity: 1,\n            fillOpacity: .6,\n            fillColor: \"#000000\",\n            clickable: false\n        };\n\n        function drawAppropriatePolygon(data){\n            removeAllHoverShapes();\n            polygon = new L.GeoJSON(JSON.parse(data.geometry), {\n                style: polygon_style\n            });\n            map.addLayer(polygon);\n            polygon.cartodb_id = data.cartodb_id;\n        }\n        function removeAllHoverShapes(){\n            map.removeLayer(polygon);\n            polygon.cartodb_id = null;\n        }\n\n    });\n\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/GovWiki/FrontendBundle/Resources/public/js/home/index.js\n ** module id = 0\n ** module chunks = 1\n **/"],"sourceRoot":""}